# Copyright 2007 by Starling Software, K.K.
# This is part of QAM from http://www.starling-software.com.
# For license terms, see the LICENSE.QAM file included with this distribution.

require 'qam/ruby_extensions.rb'

module QAM; class TC_RubyExtensions < Test::Unit::TestCase

    def test_take_while
	a = [ 0, 1, 2, 3, 4 ]
	assert_equal([], a.take_while { |el| false })
	assert_equal(a, a.take_while { |el| true })
	assert_equal([0, 1], a.take_while { |el| el < 2 })
    end

    def test_drop_while
	a = [ 0, 1, 2, 3, 4 ]
	assert_equal(a, a.drop_while { |el| false })
	assert_equal([], a.drop_while { |el| true })
	assert_equal([2, 3, 4], a.drop_while { |el| el < 2 })
    end

    class TestError < RuntimeError
    end

    def test_append_message_raise
	s = assert_raises(TestError) {
	    begin
		raise(TestError, "foo")
	    rescue StandardError => e
		append_message_and_raise(e, ' bar')
	    end
	}
	assert_equal('foo bar', s.message)
    end

    ##################################################
    # Class: initialize_vars

    class TestInitializeVarsSimple
	initialize_vars :a
    end

    def test_initialize_vars_simple
	obj = TestInitializeVarsSimple.new('abc')
	assert_equal('abc', obj.a)
	assert_raise(NoMethodError) { obj.a = 'def' }
    end

    class TestInitializeVarsWithInitBlock
	initialize_vars(:foo, :bar) do
	    @baz = bar * 3
	end
	attr_writer :bar
	attr_reader :baz
    end

    def test_initialize_vars_with_init_block
	obj = TestInitializeVarsWithInitBlock.new(1, 2)
	assert_equal(1, obj.foo)
	assert_equal(2, obj.bar)
	assert_equal(6, obj.baz)
	assert_raise(NoMethodError) { obj.foo = 1 }
	obj.bar = 3; assert_equal(3, obj.bar)
    end

    def test_initialize_vars_wrong_number_of_args
	klass = TestInitializeVarsWithInitBlock

	e = assert_raise(ArgumentError) { klass.new }
	assert_equal('wrong number of arguments (0 for 2)', e.message)

	e = assert_raise(ArgumentError) { klass.new(1) }
	assert_equal('wrong number of arguments (1 for 2)', e.message)

	e = assert_raise(ArgumentError) { klass.new(1, 2, 3) }
	assert_equal('wrong number of arguments (3 for 2)', e.message)
    end

    ##################################################
    # Module: class_constant

    class ClassConstantTest
	def self.add(o)
	    class_constant(:ADDED, []) { |curval| curval << o }
	end
    end

    class AddNone < ClassConstantTest;			end
    class AddOne < ClassConstantTest;	add 1;		end
    class AddTwo < ClassConstantTest;	add 1; add 2;	end

    def test_class_constant
	assert(!AddNone.constants.include?('ADDED'))
	assert(AddOne.constants.include?('ADDED'))
	assert(AddTwo.constants.include?('ADDED'))
	assert_equal([1], AddOne::ADDED)
	assert_equal([1, 2], AddTwo::ADDED)
    end

end; end
